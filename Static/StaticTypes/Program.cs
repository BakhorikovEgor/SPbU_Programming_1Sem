
namespace Static
{
    class Program
    {
        static void Main()
        {

        }
    }

    //Cтатические поля хранят состояние не объекта а всего класса/структуры.
    //Обращаться к статическим полям нужно на уровне класса,а не объекта 
    //На уровне памяти для стат.полей будет создаваться участок памяти,общий для всех объектов,
    //но память для стат полей выделяется даже если нет объектов

    //Статические св-ва нужны для для обращения к статическим полям, а также для изменения статических полей на уровне класса

    //Статические методы определяют общее для всех объектов поведение, которое не зависит от конкретного объекта
    //Для обращения к статическим методам так же применяется имя класса / структуры
    //Статические методы могут обращаться только к статическим членам класса

    //Статические конструкторы обычно используются для инициализации статических данных,
    //либо же выполняют действия, которые требуется выполнить только один раз
    //Свойства статических конструкторов:
    //1)Статические конструкторы не должны иметь модификатор доступа и не принимают параметров
    //2)Как и в статических методах, в статических конструкторах нельзя использовать ключевое слово this
    //для ссылки на текущий объект класса и можно обращаться только к статическим членам класса
    //3)Статические конструкторы нельзя вызвать в программе вручную.Они выполняются автоматически
    //при самом первом создании объекта данного класса или при первом обращении к его статическим членам (если таковые имеются)


    //Статические классы объявляются с модификатором static и могут содержать только статические поля, свойства и методы.
    //Статические классы называются обслуживающими.

    class Person
    {
        int age; //нестатическое поле - хранит уникальную для каждого объекта класса информацию
        static int retirementAge ; // статическое поле - хранит общцю информацию для класса Person

        static int counter = 0;//счётчик кол-ва созданных экземляров класса


        static Person() // статический конструктор,который устанавливает пенсионный возраст в зависимости от того какой год
        {
            if (DateTime.Now.Year >= 2019)
                retirementAge = 60;
            else
                retirementAge = 65;
        } 

        public Person(int age)
        {
            counter++; ;// появился новый экзмепля => меняем счётчик на уровне класса
            this.age = age;
        }


        public static int Counter => counter;// получаем с помощью cтатического свойства(только для чтения) значение статического поля counter

        public static void CheckRetirementStatus(Person person) // статический метод,которому передается объект Person и он проверяет на пенсии ли человек
        {
            if (person.age >= retirementAge)
                Console.WriteLine("Уже на пенсии");
            else
                Console.WriteLine($"Сколько лет осталось до пенсии: {retirementAge - person.age}");
        }



        static class Operations //статический класс, выполяняющий арифметические операции.Содержит только статические методы.
        {
            public static int Add(int x, int y) => x + y;
            public static int Subtract(int x, int y) => x - y;
            public static int Multiply(int x, int y) => x * y;
        }
    }


}